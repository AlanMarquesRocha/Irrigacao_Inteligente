/*
------------------------------------------------
------------------------------------------------
 Centro Universitário Inta (UNINTA)
 Prática 01
 Curso: Bacharelado em Engenharia de Computação
 Disciplina: Sistemas Embarcados
 Tutor: Me. Alan M. Rocha 
------------------------------------------------
------------------------------------------------
*/


#define DECODE_NEC

#if !defined(RAW_BUFFER_LENGTH)
  #define RAW_BUFFER_LENGTH 100
  #define RAW_BUFFER_LENGTH 112   // MagiQuest requires 112 bytes.
#endif

#define EXCLUDE_UNIVERSAL_PROTOCOLS   // economiza até 1000 bytes de espaço de programa
#define EXCLUDE_EXOTIC_PROTOCOLS      // economiza ~650 bytes se outros protocolos estiverem ativos

#include <LiquidCrystal.h>
#include <math.h>

// pinos do LCD: RS, EN, D4, D5, D6, D7
LiquidCrystal lcd_1(12, 11, 5, 4, 3, 2);

// constantes de hardware
const uint8_t SENSOR_TEMP     = A3;    // TMP36
const uint8_t SENSOR_UMIDADE  = A2;    // sensor de umidade
const uint8_t BUZZER_PIN      = 10;    // piezo
const uint8_t MOTOR_PIN       = 6;     // pino PWM para a bomba
const uint8_t MOTOR_PWM_MAX   = 128;   // 50% de duty-cycle (0–255)
const uint8_t MOTOR_PWM_STEP  = 16;    // incremento no soft-start
const uint16_t MOTOR_RAMP_MS  = 50;    // atraso entre cada passo de PWM

void setup() {
  Serial.begin(115200);

  // inicializa LCD
  lcd_1.begin(16, 2);
  lcd_1.noCursor();

  // 1) Exibe "UNINTA" por 5 segundos ao ligar
  lcd_1.setCursor(0, 0);
  lcd_1.print("UNINTA :)");
  delay(5000);
  lcd_1.clear();

  // 2) configura entradas e saídas
  pinMode(SENSOR_TEMP,    INPUT);
  pinMode(SENSOR_UMIDADE, INPUT);
  pinMode(BUZZER_PIN,     OUTPUT);
  pinMode(MOTOR_PIN,      OUTPUT);
}

void loop() {
  // lê sensores
  int umidade     = analogRead(SENSOR_UMIDADE);
  float temperatura = get_temperatura();

  // exibe temperatura na linha 0
  lcd_1.setCursor(0, 0);
  lcd_1.print(temperatura);
  lcd_1.print(" C     ");

  // aciona piezo se temperatura ≥ 25 °C
  if (temperatura >= 25) {
    digitalWrite(BUZZER_PIN, HIGH);
  } else {
    digitalWrite(BUZZER_PIN, LOW);
  }

  // controla a bomba via PWM conforme umidade
  if (umidade <= 292) {
    // soft-start para reduzir corrente de pico
    for (uint8_t p = 0; p <= MOTOR_PWM_MAX; p += MOTOR_PWM_STEP) {
      analogWrite(MOTOR_PIN, p);
      delay(MOTOR_RAMP_MS);
    }
    analogWrite(MOTOR_PIN, MOTOR_PWM_MAX);
  } else {
    // desliga bomba imediatamente
    analogWrite(MOTOR_PIN, 0);
  }

  // exibe mensagem na linha 1:
  // - Se temperatura ideal (20–25 °C): “Unidade ideal...”
  // - Caso contrário, mostra irrigação ou umidade alta
  lcd_1.setCursor(0, 1);
  if (temperatura >= 20 && temperatura <= 25) {
    lcd_1.print("Temp. ideal...");
  }
  else if (umidade <= 292) {
    lcd_1.print("Irrigando...     ");
  }
  else if (umidade >= 584) {
    lcd_1.print("Alta umidade     ");
  }
  else {
    lcd_1.print("                ");  // limpa texto
  }

  // pequena pausa entre leituras
  delay(10);
}

// converte leitura A/D do TMP36 para °C
float get_temperatura() {
  float t = analogRead(SENSOR_TEMP);
  t /= 1024.0;    // escala 0–1
  t *= 5.0;       // tensão em volts
  t -= 0.5;       // offset do TMP36
  t *= 100.0;     // converte para Celsius
  return round(t);
}

// função auxiliar não utilizada neste sketch
void show_tmp(float temperatura) {
  lcd_1.setCursor(0, 0);
  lcd_1.print("1. Temperatura");
  lcd_1.setCursor(0, 1);
  lcd_1.print(temperatura);
  lcd_1.print(" C     ");
}
